package com.harika.moviemicroservice;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import com.harika.moviemicroservice.controller.TicketController;
import com.harika.moviemicroservice.model.Movie;
import com.harika.moviemicroservice.model.Ticket;
import com.harika.moviemicroservice.service.TicketService;

public class TicketControllerTest {
	
	@Mock
	private TicketService ticketService;
	
	@InjectMocks
	private TicketController ticketC;
	
	@Autowired
	private MockMvc mockMvc;
	
	
	@BeforeEach
	public void init()
	{
		MockitoAnnotations.openMocks(this);
		mockMvc = MockMvcBuilders.standaloneSetup(ticketC).build();
	}

	List<Ticket> ticketList = new ArrayList<Ticket>();
	
	@Test
	public void getAllTicketSuccess() throws Exception
	{
		
		Ticket ticket = new Ticket();
		ticket.setMovie_id_fk(130);
		ticket.setMovieName("Amigos");
		ticket.setTheatreName("ABC-Cinemas");
		ticket.setNumberOfSeats(5);
		ticket.setTicketId(100);
		ticket.setTotalSeats(200);
		ticket.setAvailableSeats(200);
		ticket.setSeatNumber("A-J");
		
		ticketList.add(ticket);
		when(ticketService.getAllTickets(130)).thenReturn(ticketList);
		
		List<Ticket> tList = ticketService.getAllTickets(130);
		assertEquals(ticketList, tList);
		
		mockMvc.perform(MockMvcRequestBuilders.get("/movie/api/getAllMovies").contentType(MediaType.APPLICATION_JSON))
			.andExpect(MockMvcResultMatchers.status().isOk());
		
	}
	
//	@Test
//	public void getAllMovieFailure() throws Exception
//	{
//		movieList.clear();
//		when(movieService.getAllMovies()).thenReturn(movieList);
//		
//		assertEquals(0,movieList.size());
//		
//		mockMvc.perform(MockMvcRequestBuilders.get("/movie/api/getAllMovies").contentType(MediaType.APPLICATION_JSON));
//
//		
//	}


}
